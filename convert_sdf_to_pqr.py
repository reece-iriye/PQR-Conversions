# Loop through all the folders in the `pdbbind` folder to find each .mol2 file
# stored in the file tree
#

# Then, capture all those file names, then apply command line arguments using
"""
obabel -isdf data/pdbbind/{pdbank_id}/{pdbank_id}_ligand.sdf \
       -opqr -Odata/generated/{pdbank_id}/{pdbank_id}_ligand.pqr \
       --FF AMBER
"""
# IMPORTANT TO NOTE HERE:
    # `obabel -L charges` LISTS THE POSSIBLE CHARGE MODELS THAT CAN BE USED.
    # `obabel -L energy` LISTS THE POSSIBLE ENERGY TYPES
    # We used the `sdf` file since charge calculations were working in this context.

# For each ligand, replace the atom radii generated by `obabel` with ZAP9 standard radii first
# then BONDI if the atom doesn't exist in ZAP9. Keep the same radius otherwise
# if it does not appear in ZAP9 or BONDI.
    # The ZAP9 and BONDI are the preferred PDB2PQR radii. See `mol2_classes.py` for more,
    # which is largely copied from the PDB2PQR internal code.


import os
import subprocess
from typing import List, Dict
from pathlib import Path


#: Radii for different atom types.
#: When using these tables, the most specific Sybyl atom type should be used
#: first and then the generic element should be used
RADII: Dict[str, Dict[str, float]] = {
    # NOTE - these are not the original PARSE radii but they are the ones
    # included in the previous version of PDB2PKA so I'm preserving them for
    # posterity. There's a claim they came from
    # http://amber.ch.ic.ac.uk/archive/ but that link no longer works.
    "not parse - do not use": {
        "C": 1.70,
        "N": 1.50,
        "O": 1.40,
        "S": 1.85,
        "H": 1.00,
        "Br": 2.50,
        "F": 1.20,
        "P": 1.90,
        "Cl": 1.75,
    },
    #: These are the PARSE radii from Table 4 of
    #: http://doi.org/10.1021/j100058a043
    "parse": {
        "C.1": 2.00,
        "C.2": 2.00,
        "C.3": 2.00,
        "C": 1.70,
        "H": 1.00,
        "O": 1.40,
        "N": 1.50,
        "S": 1.85,
    },
    #: These are the ZAP radii from Table 2 of
    #: http://doi.org/10.1021/jm070549%2B. Bondi radii should be used for
    #: atoms not found in this table.
    "zap9": {
        "C": 1.87,
        "H": 1.10,
        "O.co2": 1.76,
        "N": 1.40,
        "S": 2.15,
        "F": 2.40,
        "Cl": 1.82,
        "I": 2.65,
    },
    #: These are the Bondi radii from Table 2 of
    #: http://doi.org/10.1021/jm070549%2B
    "bondi-zap": {
        "C": 1.7,
        "H": 1.20,
        "O.co2": 1.52,
        "N": 1.55,
        "S": 1.80,
        "F": 1.47,
        "Cl": 1.75,
        "I": 1.98,
    },
    #: These are the Bondi radii from Table I of
    #: http://doi.org/10.1021/j100785a001. NOTE - there are some variations to
    #: the halogens in Table V that we might want to consider in the future.
    "bondi": {
        "H": 1.20,
        "He": 1.40,
        "C": 1.70,
        "N": 1.55,
        "O": 1.52,
        "F": 1.47,
        "Ne": 1.54,
        "Si": 2.10,
        "P": 1.80,
        "S": 1.80,
        "Cl": 1.75,
        "Ar": 1.88,
        "As": 1.85,
        "Se": 1.90,
        "Br": 1.85,
        "Kr": 2.02,
        "Te": 2.06,
        "I": 1.98,
        "Xe": 2.16,
    },
}


def _get_radius(atom_type: str) -> float:
    """Get the radius for a given atom type."""
    if atom_type in RADII["zap9"]:
        return RADII["zap9"][atom_type]
    elif atom_type in RADII["bondi"]:
        return RADII["bondi"][atom_type]
    else:
        return -1  # Indicates the atom type was not found


def find_sdf_files(start_dir: str) -> List[Path]:
    """Find all .sdf files in the directory tree starting at start_dir."""
    sdf_files = [
        Path(root) / file
        for root, dirs, files in os.walk(start_dir)
        for file in files if file.endswith(".sdf")
    ]
    return sdf_files


def convert_sdf_to_pqr(input_file: str, output_file: str) -> None:
    """Convert SDF file to PQR using Open Babel."""
    subprocess.run(["obabel", "-isdf", input_file, "-opqr", "-O", output_file, "--FF", "AMBER"])

def update_pqr_radii(input_file: str, output_file: str) -> None:
    """Update the radii in a PQR file based on atom type."""
    with open(input_file, "r") as f:
        lines = f.readlines()

    with open(output_file, "w") as f:
        for line in lines:
            if line.startswith("ATOM") or line.startswith("HETATM"):
                parts = line.split()
                atom_type = parts[-1]
                radius = _get_radius(atom_type)
                if radius != -1:
                    parts[10] = "{:.6f}".format(radius)
                f.write(" ".join(parts) + "\n")
            else:
                f.write(line)


def process_files(sdf_files: List[Path]) -> None:
    """Process each .sdf file found."""
    for sdf_path in sdf_files:
        # Construct the output directory based on the sdf file path
        output_dir = Path("data/generated") / sdf_path.parent.relative_to("data/pdbbind")
        output_dir.mkdir(parents=True, exist_ok=True)

        # Construct input and output file paths
        input_file = str(sdf_path)
        output_file = str(output_dir / f"{sdf_path.stem}.pqr")

        # Convert SDF to PQR
        convert_sdf_to_pqr(input_file, output_file)

        # Update radii in the PQR file, assuming temp file is the same as output for simplicity
        update_pqr_radii(output_file, output_file)


if __name__ == "__main__":
    sdf_files = find_sdf_files("data/pdbbind")
    process_files(sdf_files)
